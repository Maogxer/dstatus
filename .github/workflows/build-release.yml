name: Build and Release

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'neko-status/**'
      - '.github/workflows/build-release.yml'
      - 'go.*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          # 禁用缓存功能，避免缓存错误
          cache: false

      - name: Check directory structure
        run: |
          echo "当前工作目录: $(pwd)"
          echo "仓库根目录文件列表:"
          ls -la
          echo "neko-status目录文件列表:"
          ls -la neko-status/
          echo "查找go.sum文件:"
          find . -name "go.sum"

      - name: Install dependencies
        run: |
          cd neko-status
          go mod tidy
          go mod download

      - name: Build for macOS (on macOS runner)
        if: matrix.os == 'macos-latest'
        run: |
          cd neko-status
          # 创建构建目录
          mkdir -p build

          echo "构建 darwin arm64 (Apple Silicon)版本..."
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -o build/neko-status_darwin_arm64 main_simple.go

          echo "构建 darwin amd64 (Intel)版本..."
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -o build/neko-status_darwin_amd64 main_simple.go

          # 创建通用macOS二进制文件
          echo "创建darwin通用二进制文件..."
          lipo -create -output build/neko-status_darwin_universal build/neko-status_darwin_amd64 build/neko-status_darwin_arm64

          # 设置可执行权限
          chmod +x build/neko-status_*
          ls -la build/

      - name: Build for Linux and other platforms (on Ubuntu runner)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd neko-status
          # 创建构建目录
          mkdir -p build

          # 主要Linux平台
          echo "构建 linux amd64 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o build/neko-status_linux_amd64 main_simple.go

          echo "构建 linux arm64 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-w -s" -o build/neko-status_linux_arm64 main_simple.go

          echo "构建 linux 386 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=386 go build -ldflags="-w -s" -o build/neko-status_linux_386 main_simple.go

          # ARM版本
          echo "构建 linux arm7 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=7 go build -ldflags="-w -s" -o build/neko-status_linux_arm7 main_simple.go

          echo "构建 linux arm6 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=6 go build -ldflags="-w -s" -o build/neko-status_linux_arm6 main_simple.go

          echo "构建 linux arm5 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=5 go build -ldflags="-w -s" -o build/neko-status_linux_arm5 main_simple.go

          # MIPS版本
          echo "构建 linux mips 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=mips go build -ldflags="-w -s" -o build/neko-status_linux_mips main_simple.go

          echo "构建 linux mipsle 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=mipsle go build -ldflags="-w -s" -o build/neko-status_linux_mipsle main_simple.go

          echo "构建 linux mips64 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=mips64 go build -ldflags="-w -s" -o build/neko-status_linux_mips64 main_simple.go

          echo "构建 linux mips64le 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=mips64le go build -ldflags="-w -s" -o build/neko-status_linux_mips64le main_simple.go

          # 其他架构
          echo "构建 linux ppc64le 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=ppc64le go build -ldflags="-w -s" -o build/neko-status_linux_ppc64le main_simple.go

          echo "构建 linux s390x 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=s390x go build -ldflags="-w -s" -o build/neko-status_linux_s390x main_simple.go

          echo "构建 linux riscv64 版本..."
          CGO_ENABLED=0 GOOS=linux GOARCH=riscv64 go build -ldflags="-w -s" -o build/neko-status_linux_riscv64 main_simple.go || echo "RISC-V构建失败，跳过"

          # BSD系列
          echo "构建 freebsd amd64 版本..."
          CGO_ENABLED=0 GOOS=freebsd GOARCH=amd64 go build -ldflags="-w -s" -o build/neko-status_freebsd_amd64 main_simple.go

          echo "构建 freebsd 386 版本..."
          CGO_ENABLED=0 GOOS=freebsd GOARCH=386 go build -ldflags="-w -s" -o build/neko-status_freebsd_386 main_simple.go

          echo "构建 freebsd arm64 版本..."
          CGO_ENABLED=0 GOOS=freebsd GOARCH=arm64 go build -ldflags="-w -s" -o build/neko-status_freebsd_arm64 main_simple.go || echo "FreeBSD ARM64构建失败，跳过"

          echo "构建 netbsd amd64 版本..."
          CGO_ENABLED=0 GOOS=netbsd GOARCH=amd64 go build -ldflags="-w -s" -o build/neko-status_netbsd_amd64 main_simple.go

          echo "构建 netbsd 386 版本..."
          CGO_ENABLED=0 GOOS=netbsd GOARCH=386 go build -ldflags="-w -s" -o build/neko-status_netbsd_386 main_simple.go

          echo "构建 openbsd amd64 版本..."
          CGO_ENABLED=0 GOOS=openbsd GOARCH=amd64 go build -ldflags="-w -s" -o build/neko-status_openbsd_amd64 main_simple.go || echo "OpenBSD构建失败，跳过"

          echo "构建 openbsd 386 版本..."
          CGO_ENABLED=0 GOOS=openbsd GOARCH=386 go build -ldflags="-w -s" -o build/neko-status_openbsd_386 main_simple.go || echo "OpenBSD 386构建失败，跳过"

          echo "构建 dragonfly amd64 版本..."
          CGO_ENABLED=0 GOOS=dragonfly GOARCH=amd64 go build -ldflags="-w -s" -o build/neko-status_dragonfly_amd64 main_simple.go || echo "DragonFly BSD构建失败，跳过"

          # Windows版本
          echo "构建 windows amd64 版本..."
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o build/neko-status_windows_amd64.exe main_simple.go

          echo "构建 windows 386 版本..."
          CGO_ENABLED=0 GOOS=windows GOARCH=386 go build -ldflags="-w -s" -o build/neko-status_windows_386.exe main_simple.go

          echo "构建 windows arm64 版本..."
          CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -ldflags="-w -s" -o build/neko-status_windows_arm64.exe main_simple.go || echo "Windows ARM64构建失败，跳过"

          # 创建通用版本
          echo "创建linux通用二进制文件..."
          cp build/neko-status_linux_amd64 build/neko-status_linux_universal

          echo "创建完全通用二进制文件..."
          cp build/neko-status_linux_amd64 build/neko-status_universal

          # 设置可执行权限
          chmod +x build/neko-status_*
          ls -la build/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: neko-status/build/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          # 创建发布目录
          mkdir -p release

          # 移动所有构建文件到发布目录
          # 先复制macos的构建文件
          cp -f artifacts/binaries-macos-latest/* release/ || true
          # 再复制ubuntu的构建文件（会覆盖重复的文件）
          cp -f artifacts/binaries-ubuntu-latest/* release/ || true

          # 直接使用原始二进制文件，不创建压缩包
          cd release

          echo "准备所有平台二进制文件..."

          # 设置所有文件的可执行权限
          chmod +x neko-status_* || true

          # 为Windows文件创建一个简单的说明文件
          for platform in windows_amd64 windows_386 windows_arm64; do
            if [ -f "neko-status_${platform}.exe" ]; then
              echo "准备 ${platform} 说明文件..."
              echo "Windows平台使用说明: 请右键点击文件，选择“以管理员身份运行”或直接双击运行。" > "neko-status_${platform}_readme.txt"
            fi
          done

          # 生成校验和
          echo "生成校验和..."
          sha256sum neko-status_* > SHA256SUMS

          # 创建版本信息文件
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "DEV-$(date +%Y-%m-%d_%H:%M:%S)" > version.txt
          else
            echo "$(date +%Y-%m-%d_%H:%M:%S)" > version.txt
          fi

          echo "文件列表:"
          ls -la  # 显示文件列表以便调试

      # 如果是develop分支，先删除已存在的dev-latest标签
      - name: Delete existing dev-latest tag
        if: github.ref == 'refs/heads/develop'
        run: |
          git push origin :refs/tags/dev-latest || true

      # 如果是main分支，先删除已存在的latest标签
      - name: Delete existing latest tag
        if: github.ref == 'refs/heads/main'
        run: |
          git push origin :refs/tags/latest || true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Development Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/develop'
        with:
          files: release/*
          name: "Development Build"
          tag_name: "dev-latest"
          prerelease: true
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true

      - name: Create Latest Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/main'
        with:
          files: release/*
          name: "Latest Build"
          tag_name: "latest"
          prerelease: false
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true