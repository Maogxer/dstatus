name: Build and Release

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux构建
          - os: ubuntu-latest
            targets: >-
              linux/amd64
              linux/arm64
              linux/386
              linux/arm/v7
          # macOS构建
          - os: macos-latest
            targets: >-
              darwin/amd64
              darwin/arm64
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          # 禁用缓存功能，避免缓存错误
          cache: false
      
      - name: Check directory structure
        run: |
          echo "当前工作目录: $(pwd)"
          echo "仓库根目录文件列表:"
          ls -la
          echo "neko-status目录文件列表:"
          ls -la neko-status/
          echo "查找go.sum文件:"
          find . -name "go.sum"
      
      - name: Install dependencies
        run: |
          cd neko-status
          go mod tidy
          go mod download
      
      - name: Build for ${{ matrix.os }}
        run: |
          cd neko-status
          chmod +x build-ci.sh
          ./build-ci.sh
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}
          path: neko-status/build/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    # 仅在推送tag或main/develop分支时运行
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Prepare release files
        run: |
          # 创建发布目录
          mkdir -p release
          # 移动所有构建文件到发布目录
          mv binaries-*/* release/
          cd release
          # 生成校验和
          sha256sum neko-status_* > SHA256SUMS
          # 创建版本信息文件
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "DEV-$(date +%Y-%m-%d_%H:%M:%S)" > version.txt
          else
            echo "$(date +%Y-%m-%d_%H:%M:%S)" > version.txt
          fi
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release/*
          draft: false
          prerelease: false
          
      - name: Create Development Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/develop'
        with:
          files: release/*
          name: "Development Build"
          tag_name: "dev-latest"
          prerelease: true
          draft: false
          
      - name: Create Latest Release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/main'
        with:
          files: release/*
          name: "Latest Build"
          tag_name: "latest"
          prerelease: false
          draft: false

  # 部署到GitHub Pages
  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Prepare files for Pages
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # 主分支部署到根目录
            mkdir -p public
            mv binaries-*/* public/
            cd public
            echo "$(date +%Y-%m-%d_%H:%M:%S)" > version.txt
          else
            # develop分支部署到dev目录
            mkdir -p public-dev
            mv binaries-*/* public-dev/
            cd public-dev
            echo "DEV-$(date +%Y-%m-%d_%H:%M:%S)" > version.txt
          fi
          chmod +x neko-status*
          ls -la
          
      - name: Deploy to Pages (main)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'public'
          
      - name: Deploy main to Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/deploy-pages@v4
          
      - name: Deploy to Pages (develop)
        if: github.ref == 'refs/heads/develop'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: public-dev
          target-folder: dev
          clean: false
          
      # 复制到静态目录
      - name: Copy to static directory
        run: |
          cp neko-status/build/neko-status_linux_universal static/neko-status 